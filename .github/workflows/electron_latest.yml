name: Build FUXA Electron App (Latest)
on:
  #push:
    #branches:
  #pull_request:
  workflow_dispatch:
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x64, arm64]
        exclude:
          - os: windows-latest
            arch: arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    - name: Enforce IPv4 Connectivity
      run: |
        echo "IPV4_ONLY=1" >> $GITHUB_ENV
        if [ "$RUNNER_OS" = "Linux" ]; then
          sudo sed -i 's/#precedence ::ffff:0:0\/96  100/precedence ::ffff:0:0\/96  100/' /etc/gai.conf || echo "IPv4 precedence already set or gai.conf not modifiable"
        elif [ "$RUNNER_OS" = "Windows" ]; then
          powershell -Command "Set-Item -Path Env:IPV4_ONLY -Value 1"
        else
          echo "export IPV4_ONLY=1" >> $GITHUB_ENV
          if command -v networksetup >/dev/null 2>&1; then
            sudo networksetup -setv4off VPN || echo "Failed to disable IPv6 on VPN (if any)"
            echo "IPv4 preference set via networksetup (if supported)"
          else
            echo "networksetup not available, using IPV4_ONLY env var"
          fi
        fi
        echo "Forcing IPv4 for network operations"
      shell: bash
    - name: Set Custom DNS to 8.8.8.8
      run: |
        if [ "$RUNNER_OS" = "Linux" ]; then
          echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf > /dev/null || echo "Failed to set DNS, runner may override"
        elif [ "$RUNNER_OS" = "Windows" ]; then
          powershell -Command "try { $interfaces = Get-NetAdapter | Where-Object { $_.Status -eq 'Up' }; if ($interfaces) { Set-DnsClientServerAddress -InterfaceIndex $interfaces[0].InterfaceIndex -ServerAddresses ('8.8.8.8') } else { Write-Host 'No active network interfaces found' } } catch { Write-Host 'Failed to set DNS, runner may override' }"
        else
          # macOS: Use networksetup to set DNS (if permitted)
          if command -v networksetup >/dev/null 2>&1; then
            sudo networksetup -setdnsservers Wi-Fi 8.8.8.8 || echo "Failed to set DNS, runner may override"
          else
            echo "networksetup not available, DNS unchanged"
          fi
        fi
        echo "Attempting to force DNS to 8.8.8.8"
      shell: bash
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    - name: Clear npm cache
      run: npm cache clean --force
    - name: Set npm registry to mirror
      run: npm config set registry https://registry.npmmirror.com
    - name: Install server dependencies
      run: npm install
      working-directory: ./server
    - name: Install client dependencies
      run: npm install
      working-directory: ./client
    - name: Build client
      run: npm run build -- --configuration=production
      working-directory: ./client
    - name: Install app dependencies
      run: npm install
      working-directory: ./app
    - name: Copy server and client build to app
      run: |
        mkdir -p app/server
        mkdir -p app/client/dist
        cp -r server/. app/server/
        cp -r client/dist/. app/client/dist
      #ls -R app/server
      #ls -R app/client/dist
      shell: bash
    - name: Package for Windows
      if: matrix.os == 'windows-latest' && matrix.arch == 'x64'
      run: npx electron-builder --win nsis --x64
      working-directory: ./app
    - name: Package for Linux
      if: matrix.os == 'ubuntu-latest'
      run: npx electron-builder --linux appimage --${{ matrix.arch }}
      working-directory: ./app
    - name: Package for macOS
      if: matrix.os == 'macos-latest'
      run: npx electron-builder --mac dmg --${{ matrix.arch }}
      working-directory: ./app
    - name: Prepare artifacts
      run: |
        mkdir -p artifacts
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          mv dist/*.exe artifacts/FUXA-windows-x64.exe
        elif [ "${{ matrix.os }}" = "ubuntu-latest" ] && [ "${{ matrix.arch }}" = "x64" ]; then
          mv dist/*.AppImage artifacts/FUXA-linux-x64.AppImage
        elif [ "${{ matrix.os }}" = "ubuntu-latest" ] && [ "${{ matrix.arch }}" = "arm64" ]; then
          mv dist/*.AppImage artifacts/FUXA-linux-arm64.AppImage
        elif [ "${{ matrix.os }}" = "macos-latest" ] && [ "${{ matrix.arch }}" = "x64" ]; then
          mv dist/*.dmg artifacts/FUXA-macos-x64.dmg
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          mv dist/*.dmg artifacts/FUXA-macos-arm64.dmg
        fi
      working-directory: ./app
      shell: bash
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: FUXA-${{ matrix.os }}-${{ matrix.arch }}
        path: app/artifacts/*
